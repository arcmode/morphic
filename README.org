#+TITLE: The frameless pattern: Modularity as a platform
#+AUTHOR: David Rojas
#+EMAIL: (concat "drojascamaggi" at-sign "gmail.com")

#+OPTIONS: toc:nil num:2 H:3 ^:nil pri:t title:nil
#+EXPORT_FILE_NAME: index
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://drojas.github.io/org-html-dracula/styles/org.css">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles/org.css">

#+BEGIN_export html
<h1 class="title">
  <span class="accent">></span> add module --type res<span class="inverse">t</span>
</h2>
#+END_export

#+BEGIN_abstract
Boilerplate code is an underrated problem: the chunks of non-reusable code and other necessary evils that are usually
granted as scaffolding or abstracted away as a mixture of library code and configuration are cheap to buy but come as very
expensive to replace. There is accidental complexity in most if not all boilerplate code around any /main/ function or source code
module that depends on any library or framework. Therefore, when working with multiple /main/ functions (faas, microservices, or
distributed systems) this space for boilerplate can be disrupted by problems that scale with the number of /mains/ at play and
the total number of modules including code repetition, anti-patterns and long cycle times. This document proposes a pattern for
building modular systems with minimal interfaces that eliminates boilerplate code and allow modules to work without having any
dependency on framework/library APIs.
#+END_abstract

#+TOC: headlines 2

* TL;DR;

Instead of doing:

1) Pick a framework/library
2) Implement a set of modules following the modularity model from framework/library

Try the "frameless" pattern:

1) Define modularity model via a "platform" function: platform (module) = features.
2) Implement the function as a thin layer that can include a module as part of a given program defined using some framework/library
3) Implement set of modules following your modularity model

* Modeling modularity

Most projects grow in a modular fashion, adding new modules incrementally to do the work that is required.
Most projects also work with languages, frameworks and libraries that provide a general modularity model.
Then, the distance between our idea of what is a "module" for a specific project/concern and what does it (have to) contain for it to
be functional and the actual module specs provided by the platform (languages, libraries and frameworks) may imposes unneeded complexity
to both design and implementation work.

The first take away from this realization is the idea about how modeling modularity in the context of your specific business
domain and tools may improve productivity and quality of software development by reducing the complexity that would be otherwise
required in order to "adapt" project modules into platform modules.

In other words, modeling modularity will most likely simplify the work required for adding new modules to a given system.

* WIP: Problem space
** Modularity vs Evolvability
In software development, the idea of evolution can be seen as the process of (sometimes very slowly) adapting

From: https://en.wikipedia.org/wiki/Evolvability
#+BEGIN_QUOTE
Evolvability is defined as the capacity of a system for adaptive evolution.
Evolvability is the ability of a population of organisms to not merely generate genetic diversity,
but to generate adaptive genetic diversity, and thereby evolve through natural selection.
#+END_QUOTE

** Modularity vs consistency
Most web projects require significant boilerplate code in order to run production applications. One of the most obvios properties 
of modular systems is the bigger number of running programs. The combination of modularity with patterns and tools that increase
boilerplate code creates a space for inconsistency that affects modular systems as they adopt new features and behavior not
yet defined within the "boilerplate-free" area of library and framework code.

Following, a couple of tech-oriented definitions for modulerity from: https://en.wikipedia.org/wiki/Modularity
#+BEGIN_QUOTE
In modular programming, modularity refers to the compartmentalization and interrelation of the parts of a software package.\\

In software design, modularity refers to a logical partitioning of the "software design" that allows complex software to be manageable
for the purpose of implementation and maintenance. The logic of partitioning may be based on related functions, implementation
considerations, data links, or other criteria.
#+END_QUOTE

One interesting aspect of the last definition is the idea the relationship between complexity and software being manageable is
and worth paying close attention to and perhaps explore with "biomimicry lenses".

Let's compare the previous definitions with a biological one from: https://en.wikipedia.org/wiki/Modularity_(biology)
#+BEGIN_QUOTE
Modularity refers to the ability of a system to organize discrete, individual units that can overall increase the efficiency of network
activity and, in a biological sense, facilitates selective forces upon the network. Modularity is observed in all model systems, and can
be studied at nearly every scale of biological organization, from molecular interactions all the way up to the whole organism.
#+END_QUOTE

The ideas behind "to be manageable" from the tech-oriented definition and of "selective forces" from the biological one seem aligned with
the "shortest path" mentality of both nature and the agile movement within the tech industry.
* WIP: Solution space
  Biological systems are modular in many ways. Let's try borrow some goodies from their /designs/.
*** Technologies used in this experiment
  1) [[https://nodejs.org/en/][nodejs]]
  2) [[https://lerna.js.org/][Lerna]]
  3) [[https://www.typescriptlang.org/][TypeScript]]
  4) [[https://www.fastify.io/][fastify]]
  5) [[https://www.hygen.io/][Hygen]]
*** Modularity Model
   The module/framework relationship is modeled as inspired by the organism/niche relationship. One aspect of that relationship that can be
   recognized is the apparent level of adaptation. An adapted organism can benefit from the ecosystem and thrive by means of a multi-dimensional
   interface composed by sensorial organs, motor systems and other biological structures.\\
   Hypothesis: A systemic modularity model will help improve source code consistency and reduce overall complexity
*** Contracts: The network defines the ecosystem
   The difference between an ecosystem and the niche is the emphasis about the specific "role" an organism plays as part of the ecosystem and the
   specific "experience" the organism has in said ecosystem. Without twisting biology too much math into biology one could say the niche of an
   organism is the experience it has within the ecosystems it is embedded in plus the difference it produces in the experience of the other systems.\\
   # Hypothesis: A systemic modularity model will improve the domain language by allowing the exercise of a more domain-focused interfaces
*** Robustness
   Hypothesis: A formal modularity model implemented as described above increases quality over time (less bugs)
*** Adaptability
   Hypothesis: A systemic modularity model will improve engineering cycle speed and/or results
*** Extensibility & Evolvability
   Diversity is a key aspect of successful (biological) ecosystems and commonly associated to adaptation.\\
   Hypothesis: A systemic modularity model will increase contributions to its own design and library/framework code
*** Simplicity
   An apparent property of evolution is the reuse of solutions. The evolution of an organism (basically a lineage of
   cells) can be easily compared to the common idea of evolution of species and also to the development of eusocial colonies of insects.\\
   Hypothesis: A systemic modularity model will reduce complexity
*** Agile
   Modular development pairs naturally with paced or sprint based methodologies.\\
   Hypothesis: A systemic modularity model will reduce uncertainty and support the pace of agile methodologies.
   
** MVP: Basic module systems
   :PROPERTIES:
   :ID:       38b345b1-681b-4528-8b88-d73980e383e6
   :END:
***** DONE RPC
      CLOSED: [2019-11-17 Sun 19:47]
****** DONE hygen rpc-mod new --in examples --name hello-rpc
       CLOSED: [2019-11-17 Sun 19:43]
****** DONE hygen rpc-api new --in examples --name rpc-simple
       CLOSED: [2019-11-17 Sun 19:43]
***** DONE REST
      CLOSED: [2019-11-17 Sun 19:47]
****** DONE hygen rest-mod new --in examples --name hello-rest
       CLOSED: [2019-11-17 Sun 19:43]
****** DONE hygen rest-api new --in examples --name rest-simple
       CLOSED: [2019-11-17 Sun 19:43]
***** TODO Job
***** TODO Cronjob
***** TODO Worker (Queue consumer)
***** TODO Events producer
***** TODO Events consumer
***** TODO Database app example (MongoDB)
***** TODO K8s codegen
***** TODO Instrumentation

** Vision for v1.0
   More systems and module models
***** TODO Client codegen
***** TODO Frontend components
***** TODO ETL processes
***** TODO Stream processing
***** TODO Vendor modules
***** TODO Platform extensions (Idea: module functors)
***** TODO Service Registry

** Ideas
   :PROPERTIES:
   :ID:       9b25d4a9-a4d2-4ded-9ba1-38420c98c359
   :END:
***** HATEOAS
      :PROPERTIES:
      :ID:       8b9229ef-d571-4a95-bc36-2349f1d988d0
      :END:
***** GraphQL
      :PROPERTIES:
      :ID:       a9a15666-e24e-4918-9a29-f6fa1437096c
      :END:
***** Auto partitioning
***** Bring your own framework example
***** NPM Tarball Functor as a Service

* Inspired partially by
- Biology
- Fractals
- [[https://github.com/GoogleContainerTools/jib][Jib]]
